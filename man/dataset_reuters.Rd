% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/datasets.R
\name{dataset_reuters}
\alias{dataset_reuters}
\alias{dataset_reuters_word_index}
\title{Reuters newswire topics classification}
\usage{
dataset_reuters(
  path = "reuters.npz",
  num_words = NULL,
  skip_top = 0L,
  maxlen = NULL,
  test_split = 0.2,
  seed = 113L,
  start_char = 1L,
  oov_char = 2L,
  index_from = 3L,
  convert = TRUE
)

dataset_reuters_word_index(path = "reuters_word_index.pkl")
}
\arguments{
\item{path}{Where to cache the data (relative to \verb{~/.keras/dataset}).}

\item{num_words}{Max number of words to include. Words are ranked by how
often they occur (in the training set) and only the most frequent words are
kept}

\item{skip_top}{Skip the top N most frequently occuring words (which may not
be informative).}

\item{maxlen}{Truncate sequences after this length.}

\item{test_split}{Fraction of the dataset to be used as test data.}

\item{seed}{Random seed for sample shuffling.}

\item{start_char}{The start of a sequence will be marked with this character.
Set to 1 because 0 is usually the padding character.}

\item{oov_char}{words that were cut out because of the \code{num_words} or
\code{skip_top} limit will be replaced with this character.}

\item{index_from}{index actual words with this index and higher.}

\item{convert}{When \code{TRUE} (default) the datasets are returned as R arrays.
If \code{FALSE}, objects are returned as NumPy arrays.}
}
\value{
Lists of training and test data: \verb{train$x, train$y, test$x, test$y}
with same format as \code{\link[=dataset_imdb]{dataset_imdb()}}. The \code{dataset_reuters_word_index()}
function returns a list where the names are words and the values are
integer. e.g. \code{word_index[["giraffe"]]} might return \code{1234}.

\if{html}{\out{<div class="sourceCode">}}\preformatted{train/
├─ x
└─ y
test/
├─ x
└─ y
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{str(dataset_reuters())
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## List of 2
##  $ train:List of 2
##   ..$ x:List of 8982
##   .. ..$ : int [1:87] 1 27595 28842 8 43 10 447 5 25 207 ...
##   .. ..$ : int [1:56] 1 3267 699 3434 2295 56 16784 7511 9 56 ...
##   .. ..$ : int [1:139] 1 53 12 284 15 14 272 26 53 959 ...
##   .. ..$ : int [1:224] 1 4 686 867 558 4 37 38 309 2276 ...
##   .. ..$ : int [1:101] 1 8295 111 8 25 166 40 638 10 436 ...
##   .. ..$ : int [1:116] 1 4 37 38 309 213 349 1632 48 193 ...
##   .. ..$ : int [1:100] 1 56 5539 925 149 8 16 23 931 3875 ...
##   .. ..$ : int [1:100] 1 53 648 26 14 749 26 39 6207 5466 ...
##   .. ..$ : int [1:82] 1 178 53 321 26 14 948 26 178 39 ...
##   .. ..$ : int [1:106] 1 56 7224 81 40 1175 174 19892 6 1793 ...
##   .. ..$ : int [1:31] 1 245 273 207 156 53 74 160 26 14 ...
##   .. ..$ : int [1:59] 1 56 141 5618 1607 149 8 16 33 223 ...
##   .. ..$ : int [1:65] 1 14786 81 8 16 625 42 120 7 1679 ...
##   .. ..$ : int [1:316] 1 248 409 166 1461 1284 3906 8 4 495 ...
##   .. ..$ : int [1:527] 1 4 113 23 133 6 433 226 7 1182 ...
##   .. ..$ : int [1:76] 1 577 9 355 430 21 4 2222 5 4 ...
##   .. ..$ : int [1:114] 1 945 65 111 8 10 498 40 85 2120 ...
##   .. ..$ : int [1:17] 1 486 341 785 26 14 482 26 255 606 ...
##   .. ..$ : int [1:91] 1 53 19 296 15 14 258 26 53 959 ...
##   .. ..$ : int [1:77] 1 7567 851 260 542 159 13 52 29 23 ...
##   .. ..$ : int [1:231] 1 779 37 38 465 278 6623 55 900 6 ...
##   .. ..$ : int [1:108] 1 73 418 904 2627 2198 8 36 717 271 ...
##   .. ..$ : int [1:83] 1 10779 71 8 16 385 6 42 904 103 ...
##   .. ..$ : int [1:29] 1 245 273 397 124 53 191 26 14 83 ...
##   .. ..$ : int [1:95] 1 29 6 207 156 169 103 858 131 74 ...
##   .. ..$ : int [1:110] 1 144 62 2115 451 82 5 37 38 399 ...
##   .. ..$ : int [1:23] 1 53 745 26 14 722 26 39 7442 18 ...
##   .. ..$ : int [1:373] 1 10 545 856 3931 1187 20189 33 1076 2045 ...
##   .. ..$ : int [1:114] 1 178 53 279 26 14 124 26 178 39 ...
##   .. ..$ : int [1:354] 1 2163 317 65 131 1462 23 768 1225 15825 ...
##   .. ..$ : int [1:133] 1 4 37 38 309 213 8 443 37 38 ...
##   .. ..$ : int [1:222] 1 293 270 111 8 16 34 4814 27 3546 ...
##   .. ..$ : int [1:571] 1 4 37 38 424 309 415 524 795 6 ...
##   .. ..$ : int [1:155] 1 4 1795 232 60 240 128 140 21 68 ...
##   .. ..$ : int [1:83] 1 4 37 38 23 6 3186 6526 841 11 ...
##   .. ..$ : int [1:208] 1 1961 81 149 56 28762 115 8 16 33 ...
##   .. ..$ : int [1:170] 1 1378 234 99 610 60 8 4 60 1543 ...
##   .. ..$ : int [1:269] 1 978 66 262 1251 10180 8 107 4 293 ...
##   .. ..$ : int [1:74] 1 29 6 94 156 89 67 2115 2453 14 ...
##   .. ..$ : int [1:19] 1 486 341 119 26 14 119 26 7 255 ...
##   .. ..$ : int [1:23] 1 53 258 26 14 187 26 39 3914 18 ...
##   .. ..$ : int [1:78] 1 4 7085 66 253 2776 6 5345 11 15 ...
##   .. ..$ : int [1:21] 1 599 1815 299 45 1320 194 198 2041 28 ...
##   .. ..$ : int [1:377] 1 496 427 111 450 91 57 6 679 25 ...
##   .. ..$ : int [1:104] 1 2856 56 12269 626 450 8 16 40 129 ...
##   .. ..$ : int [1:299] 1 4 37 38 431 8 25 1213 1957 5 ...
##   .. ..$ : int [1:89] 1 11178 442 101 13 104 34 68 20 217 ...
##   .. ..$ : int [1:56] 1 155 822 62 3510 9 188 5104 7 42 ...
##   .. ..$ : int [1:94] 1 60 5 130 1461 3366 1896 8 36 2464 ...
##   .. ..$ : int [1:139] 1 53 284 26 14 319 39 47 5211 18 ...
##   .. ..$ : int [1:118] 1 1479 1197 71 8 25 1479 1197 640 71 ...
##   .. ..$ : int [1:36] 1 53 19 1090 15 14 1018 26 39 44 ...
##   .. ..$ : int [1:137] 1 2185 921 9 1493 103 4971 1925 8 16 ...
##   .. ..$ : int [1:107] 1 53 74 312 26 14 651 10 39 74 ...
##   .. ..$ : int [1:83] 1 537 232 1231 537 232 703 111 8 16 ...
##   .. ..$ : int [1:66] 1 53 191 26 14 158 26 39 19 3412 ...
##   .. ..$ : int [1:70] 1 53 46 142 26 14 46 155 26 39 ...
##   .. ..$ : int [1:112] 1 7674 10659 71 8 16 2892 3514 1620 2357 ...
##   .. ..$ : int [1:88] 1 2626 141 450 56 2626 626 8 16 64 ...
##   .. ..$ : int [1:51] 1 53 767 26 14 124 26 39 72 2756 ...
##   .. ..$ : int [1:83] 1 56 735 268 626 71 8 16 41 2049 ...
##   .. ..$ : int [1:123] 1 15754 231 81 8 16 638 42 3699 322 ...
##   .. ..$ : int [1:17] 1 486 341 312 26 14 312 26 255 219 ...
##   .. ..$ : int [1:185] 1 1537 9347 534 45 6 761 13 10 393 ...
##   .. ..$ : int [1:84] 1 1284 5682 136 484 5 789 8 54 2395 ...
##   .. ..$ : int [1:52] 1 218 430 21 4 2222 5 181 37 38 ...
##   .. ..$ : int [1:102] 1 56 5539 925 149 8 25 116 13 12 ...
##   .. ..$ : int [1:73] 1 10524 752 13 234 867 247 79 8 16 ...
##   .. ..$ : int [1:106] 1 56 1621 3922 9 1229 81 5662 369 25 ...
##   .. ..$ : int [1:486] 1 367 40 2575 1470 6 30 7 538 5 ...
##   .. ..$ : int [1:107] 1 11633 691 149 8 13762 600 822 28 25 ...
##   .. ..$ : int [1:82] 1 53 751 26 14 648 26 39 482 32 ...
##   .. ..$ : int [1:263] 1 802 64 10 4478 66 253 5 32 59 ...
##   .. ..$ : int [1:172] 1 6475 214 71 8 25 362 23 7326 6 ...
##   .. ..$ : int [1:491] 1 569 40 129 306 572 13 25 357 162 ...
##   .. ..$ : int [1:190] 1 5985 2861 282 5 2883 9037 28 153 48 ...
##   .. ..$ : int [1:143] 1 2173 3174 2841 491 8 2478 3638 2383 3096 ...
##   .. ..$ : int [1:62] 1 4 294 259 1613 16 3308 4 198 5 ...
##   .. ..$ : int [1:26] 1 4 497 81 8 4 354 598 846 1227 ...
##   .. ..$ : int [1:88] 1 12507 111 8 56 9891 11563 5 13733 192 ...
##   .. ..$ : int [1:114] 1 1139 357 162 114 513 6 258 11 1232 ...
##   .. ..$ : int [1:38] 1 53 272 26 14 158 26 39 32 3125 ...
##   .. ..$ : int [1:85] 1 53 284 26 14 684 26 39 19 7103 ...
##   .. ..$ : int [1:112] 1 4 37 38 740 291 1098 1641 40 1175 ...
##   .. ..$ : int [1:793] 1 37 412 128 140 1431 306 6 449 246 ...
##   .. ..$ : int [1:104] 1 178 53 46 142 26 14 46 319 12748 ...
##   .. ..$ : int [1:25] 1 53 321 26 14 614 26 39 19 3611 ...
##   .. ..$ : int [1:21] 1 486 341 61 19 32 26 14 61 19 ...
##   .. ..$ : int [1:101] 1 56 1100 392 149 785 20 324 27 1406 ...
##   .. ..$ : int [1:28] 1 53 684 26 14 648 26 39 19 1746 ...
##   .. ..$ : int [1:25] 1 27926 1568 81 8 25 166 887 10 142 ...
##   .. ..$ : int [1:81] 1 8521 81 384 4 8962 1029 111 8 16 ...
##   .. ..$ : int [1:135] 1 53 750 26 14 644 26 39 758 980 ...
##   .. ..$ : int [1:73] 1 56 234 1829 81 8 16 40 471 10 ...
##   .. ..$ : int [1:62] 1 6120 23 772 6 334 93 187 13 10 ...
##   .. ..$ : int [1:18] 1 486 341 158 44 26 14 158 44 26 ...
##   .. ..$ : int [1:90] 1 4 237 259 1064 137 1386 13 664 76 ...
##   .. ..$ : int [1:266] 1 4263 2162 81 8 24 25 731 1092 5 ...
##   .. ..$ : int [1:91] 1 4 248 409 23 133 6 2156 4 106 ...
##   .. .. [list output truncated]
##   ..$ y: int [1:8982] 3 4 3 4 4 4 4 3 3 16 ...
##  $ test :List of 2
##   ..$ x:List of 2246
##   .. ..$ : int [1:145] 1 4 1378 2025 9 697 4622 111 8 25 ...
##   .. ..$ : int [1:745] 1 2768 283 122 7 4 89 544 463 29 ...
##   .. ..$ : int [1:228] 1 4 309 2276 4759 5 2015 403 1920 33 ...
##   .. ..$ : int [1:172] 1 11786 13716 65 9 249 1096 8 16 515 ...
##   .. ..$ : int [1:187] 1 470 354 18270 4231 62 2373 509 1687 5138 ...
##   .. ..$ : int [1:80] 1 53 134 26 14 102 26 39 5150 18 ...
##   .. ..$ : int [1:249] 1 7236 1650 71 8 16 369 99 98 186 ...
##   .. ..$ : int [1:118] 1 53 321 26 14 284 26 39 63 5201 ...
##   .. ..$ : int [1:123] 1 178 53 74 19 865 15 14 46 353 ...
##   .. ..$ : int [1:207] 1 790 752 73 418 81 8 16 40 1954 ...
##   .. ..$ : int [1:79] 1 361 372 8 77 62 325 4105 336 5 ...
##   .. ..$ : int [1:60] 1 30522 71 8 16 385 4 611 1731 9 ...
##   .. ..$ : int [1:206] 1 1719 40 1667 7 10 825 7 1932 349 ...
##   .. ..$ : int [1:27] 1 245 273 110 156 53 272 26 14 158 ...
##   .. ..$ : int [1:377] 1 987 23 19470 229 198 88 27 45 2289 ...
##   .. ..$ : int [1:703] 1 779 260 1165 1971 33 842 203 9 240 ...
##   .. ..$ : int [1:45] 1 25012 149 8 16 40 813 21 10 315 ...
##   .. ..$ : int [1:27] 1 30279 231 81 8 25 166 887 42 943 ...
##   .. ..$ : int [1:79] 1 4 60 5 794 8 16 299 45 1321 ...
##   .. ..$ : int [1:47] 1 53 751 26 14 279 26 39 160 1668 ...
##   .. ..$ : int [1:103] 1 4 204 60 40 582 61 1588 35 15 ...
##   .. ..$ : int [1:73] 1 304 46 47 597 15 14 46 47 318 ...
##   .. ..$ : int [1:22] 1 486 341 841 19 32 26 14 751 19 ...
##   .. ..$ : int [1:160] 1 15199 1568 81 8 16 23 7316 554 1078 ...
##   .. ..$ : int [1:92] 1 1371 40 129 2221 5 2226 4 141 357 ...
##   .. ..$ : int [1:27] 1 3840 341 61 19 26 14 61 19 26 ...
##   .. ..$ : int [1:259] 1 1615 3055 111 8 25 166 1763 28 10 ...
##   .. ..$ : int [1:200] 1 56 2725 71 8 16 792 5342 220 28 ...
##   .. ..$ : int [1:182] 1 4 599 283 76 453 166 14538 560 25 ...
##   .. ..$ : int [1:32] 1 53 160 26 14 134 26 39 3859 5024 ...
##   .. ..$ : int [1:65] 1 53 158 26 14 272 26 39 19 6749 ...
##   .. ..$ : int [1:122] 1 1932 48 193 283 463 40 85 553 6 ...
##   .. ..$ : int [1:105] 1 56 392 2811 387 149 8 16 625 120 ...
##   .. ..$ : int [1:53] 1 346 273 1215 284 53 352 26 14 546 ...
##   .. ..$ : int [1:96] 1 599 313 262 3557 2636 8 24 4 231 ...
##   .. ..$ : int [1:87] 1 1626 21670 111 8 25 166 5 863 4004 ...
##   .. ..$ : int [1:22] 1 9597 204 29726 1209 4 113 101 13 577 ...
##   .. ..$ : int [1:69] 1 599 1815 57 2540 2041 6 198 5871 18 ...
##   .. ..$ : int [1:93] 1 342 697 149 8 16 2503 4549 10924 71 ...
##   .. ..$ : int [1:123] 1 234 3154 71 8 16 369 99 98 39 ...
##   .. ..$ : int [1:216] 1 3157 1262 162 281 1271 1555 48 1002 2425 ...
##   .. ..$ : int [1:169] 1 130 23 133 6 1227 10 12 59 20 ...
##   .. ..$ : int [1:21] 1 486 341 134 19 32 26 14 134 19 ...
##   .. ..$ : int [1:373] 1 4 37 38 7982 961 101 202 6 59 ...
##   .. ..$ : int [1:46] 1 214 1657 362 81 8 16 40 515 4 ...
##   .. ..$ : int [1:711] 1 2330 231 103 1765 25 344 322 31 4142 ...
##   .. ..$ : int [1:117] 1 4290 346 1271 156 153 53 46 109 26 ...
##   .. ..$ : int [1:104] 1 6636 81 8 16 385 78 11 79 5 ...
##   .. ..$ : int [1:17] 1 486 341 425 26 14 425 26 384 219 ...
##   .. ..$ : int [1:106] 1 2609 64 10 66 253 5 4823 61 11 ...
##   .. ..$ : int [1:35] 1 4 99 232 60 5 1638 4 673 495 ...
##   .. ..$ : int [1:166] 1 1621 693 81 56 11458 1089 363 6 501 ...
##   .. ..$ : int [1:427] 1 4 2047 4952 654 1579 6 219 410 13 ...
##   .. ..$ : int [1:189] 1 56 1925 12784 7 50 1925 8974 56 14115 ...
##   .. ..$ : int [1:29] 1 3410 9 16466 231 71 8 16 887 25 ...
##   .. ..$ : int [1:168] 1 37 412 2152 5 4 2087 2905 1313 8 ...
##   .. ..$ : int [1:160] 1 42 2014 5 4 141 1301 120 7167 23 ...
##   .. ..$ : int [1:83] 1 293 1277 111 450 56 22527 626 11159 487 ...
##   .. ..$ : int [1:57] 1 945 248 60 8 16 1551 10 2473 475 ...
##   .. ..$ : int [1:164] 1 591 262 2273 1270 8 24 130 9 100 ...
##   .. ..$ : int [1:98] 1 56 697 643 1639 81 8 4 2155 1593 ...
##   .. ..$ : int [1:79] 1 4977 137 4322 732 721 8 16 887 42 ...
##   .. ..$ : int [1:52] 1 18059 141 71 8 16 40 1669 25 300 ...
##   .. ..$ : int [1:53] 1 681 192 1211 71 8 16 471 4 280 ...
##   .. ..$ : int [1:84] 1 6699 2162 71 8 16 40 1128 25 384 ...
##   .. ..$ : int [1:49] 1 17393 1051 221 721 71 8 25 166 887 ...
##   .. ..$ : int [1:59] 1 53 312 26 14 151 26 39 2543 18 ...
##   .. ..$ : int [1:114] 1 4791 1710 859 40 992 126 3451 7 6846 ...
##   .. ..$ : int [1:95] 1 19889 13803 647 71 8 16 40 737 1647 ...
##   .. ..$ : int [1:443] 1 4 221 182 491 2335 10 3148 5 6217 ...
##   .. ..$ : int [1:69] 1 4 174 308 40 5335 242 92 42 1158 ...
##   .. ..$ : int [1:48] 1 9041 71 8 1348 324 9041 65 37 38 ...
##   .. ..$ : int [1:15] 1 53 119 26 14 147 26 39 3914 18 ...
##   .. ..$ : int [1:488] 1 4 294 423 298 350 25 7018 7580 325 ...
##   .. ..$ : int [1:342] 1 603 936 1970 96 620 623 1518 202 70 ...
##   .. ..$ : int [1:55] 1 109 3242 407 5 332 164 362 9 2332 ...
##   .. ..$ : int [1:104] 1 4 740 291 1098 1641 40 1175 10 416 ...
##   .. ..$ : int [1:23] 1 53 440 26 14 158 26 39 3978 18 ...
##   .. ..$ : int [1:75] 1 11578 81 8 16 40 1300 172 42 3384 ...
##   .. ..$ : int [1:91] 1 232 5380 71 8 16 471 4 280 5 ...
##   .. ..$ : int [1:53] 1 53 46 312 26 14 74 142 26 39 ...
##   .. ..$ : int [1:17] 1 53 296 26 14 296 26 255 346 219 ...
##   .. ..$ : int [1:17] 1 486 341 155 26 14 155 26 255 219 ...
##   .. ..$ : int [1:243] 1 4 409 60 5 1563 10115 292 73 1001 ...
##   .. ..$ : int [1:115] 1 896 1511 227 1137 145 7 432 790 528 ...
##   .. ..$ : int [1:493] 1 496 60 623 893 140 55 328 6 302 ...
##   .. ..$ : int [1:75] 1 37 38 361 18665 1643 365 1929 2157 7 ...
##   .. ..$ : int [1:209] 1 4 113 33 433 117 4 225 78 6 ...
##   .. ..$ : int [1:239] 1 1068 9 2094 450 56 4788 626 8 73 ...
##   .. ..$ : int [1:63] 1 53 46 196 26 14 46 119 26 39 ...
##   .. ..$ : int [1:22] 1 486 341 134 19 32 26 14 134 19 ...
##   .. ..$ : int [1:34] 1 8552 1152 647 71 8 25 344 270 5 ...
##   .. ..$ : int [1:37] 1 53 46 1012 26 14 46 360 26 39 ...
##   .. ..$ : int [1:774] 1 7584 154 43 10 238 2690 13 37 38 ...
##   .. ..$ : int [1:21] 1 486 341 63 19 32 26 14 63 19 ...
##   .. ..$ : int [1:182] 1 4 490 558 1381 6 1673 2280 66 31 ...
##   .. ..$ : int [1:228] 1 2605 4478 66 253 2446 6 10 878 466 ...
##   .. ..$ : int [1:27] 1 245 273 207 156 53 147 26 14 119 ...
##   .. ..$ : int [1:333] 1 1855 81 265 5259 3568 118 371 36 299 ...
##   .. .. [list output truncated]
##   ..$ y: int [1:2246] 3 10 1 4 4 3 3 3 3 3 ...

}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode r">}}\preformatted{str(dataset_reuters(convert = FALSE))
}\if{html}{\out{</div>}}

\if{html}{\out{<div class="sourceCode">}}\preformatted{## List of 2
##  $ train:List of 2
##   ..$ x: <numpy.ndarray shape(8982), dtype=object>
##   ..$ y: <numpy.ndarray shape(8982), dtype=int64>
##  $ test :List of 2
##   ..$ x: <numpy.ndarray shape(2246), dtype=object>
##   ..$ y: <numpy.ndarray shape(2246), dtype=int64>

}\if{html}{\out{</div>}}
}
\description{
Dataset of 11,228 newswires from Reuters, labeled over 46 topics. As with
\code{\link[=dataset_imdb]{dataset_imdb()}} , each wire is encoded as a sequence of word indexes (same
conventions).
}
\seealso{
Other datasets: \cr
\code{\link{dataset_boston_housing}()} \cr
\code{\link{dataset_california_housing}()} \cr
\code{\link{dataset_cifar10}()} \cr
\code{\link{dataset_cifar100}()} \cr
\code{\link{dataset_fashion_mnist}()} \cr
\code{\link{dataset_imdb}()} \cr
\code{\link{dataset_mnist}()} \cr
}
\concept{datasets}

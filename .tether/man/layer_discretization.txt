Help on class Discretization in module keras.src.layers.preprocessing.discretization:

class Discretization(keras.src.layers.preprocessing.tf_data_layer.TFDataLayer)
 |  Discretization(bin_boundaries=None, num_bins=None, epsilon=0.01, output_mode='int', sparse=False, dtype=None, name=None)
 |
 |  A preprocessing layer which buckets continuous features by ranges.
 |
 |  This layer will place each element of its input data into one of several
 |  contiguous ranges and output an integer index indicating which range each
 |  element was placed in.
 |
 |  **Note:** This layer is safe to use inside a `tf.data` pipeline
 |  (independently of which backend you're using).
 |
 |  Input shape:
 |      Any array of dimension 2 or higher.
 |
 |  Output shape:
 |      Same as input shape.
 |
 |  Arguments:
 |      bin_boundaries: A list of bin boundaries.
 |          The leftmost and rightmost bins
 |          will always extend to `-inf` and `inf`,
 |          so `bin_boundaries=[0., 1., 2.]`
 |          generates bins `(-inf, 0.)`, `[0., 1.)`, `[1., 2.)`,
 |          and `[2., +inf)`.
 |          If this option is set, `adapt()` should not be called.
 |      num_bins: The integer number of bins to compute.
 |          If this option is set, `bin_boundaries` should not be set and
 |          `adapt()` should be called to learn the bin boundaries.
 |      epsilon: Error tolerance, typically a small fraction
 |          close to zero (e.g. 0.01). Higher values of epsilon increase
 |          the quantile approximation, and hence result in more
 |          unequal buckets, but could improve performance
 |          and resource consumption.
 |      output_mode: Specification for the output of the layer.
 |          Values can be `"int"`, `"one_hot"`, `"multi_hot"`, or
 |          `"count"` configuring the layer as follows:
 |          - `"int"`: Return the discretized bin indices directly.
 |          - `"one_hot"`: Encodes each individual element in the
 |              input into an array the same size as `num_bins`,
 |              containing a 1 at the input's bin
 |              index. If the last dimension is size 1, will encode on that
 |              dimension.  If the last dimension is not size 1,
 |              will append a new dimension for the encoded output.
 |          - `"multi_hot"`: Encodes each sample in the input into a
 |              single array the same size as `num_bins`,
 |              containing a 1 for each bin index
 |              index present in the sample.
 |              Treats the last dimension as the sample
 |              dimension, if input shape is `(..., sample_length)`,
 |              output shape will be `(..., num_tokens)`.
 |          - `"count"`: As `"multi_hot"`, but the int array contains
 |              a count of the number of times the bin index appeared
 |              in the sample.
 |          Defaults to `"int"`.
 |      sparse: Boolean. Only applicable to `"one_hot"`, `"multi_hot"`,
 |          and `"count"` output modes. Only supported with TensorFlow
 |          backend. If `True`, returns a `SparseTensor` instead of
 |          a dense `Tensor`. Defaults to `False`.
 |
 |  Examples:
 |
 |  Discretize float values based on provided buckets.
 |  >>> input = np.array([[-1.5, 1.0, 3.4, .5], [0.0, 3.0, 1.3, 0.0]])
 |  >>> layer = Discretization(bin_boundaries=[0., 1., 2.])
 |  >>> layer(input)
 |  array([[0, 2, 3, 1],
 |         [1, 3, 2, 1]])
 |
 |  Discretize float values based on a number of buckets to compute.
 |  >>> input = np.array([[-1.5, 1.0, 3.4, .5], [0.0, 3.0, 1.3, 0.0]])
 |  >>> layer = Discretization(num_bins=4, epsilon=0.01)
 |  >>> layer.adapt(input)
 |  >>> layer(input)
 |  array([[0, 2, 3, 2],
 |         [1, 3, 3, 1]])
 |
 |  Method resolution order:
 |      Discretization
 |      keras.src.layers.preprocessing.tf_data_layer.TFDataLayer
 |      keras.src.layers.layer.Layer
 |      keras.src.backend.tensorflow.layer.TFLayer
 |      keras.src.backend.tensorflow.trackable.KerasAutoTrackable
 |      tensorflow.python.trackable.autotrackable.AutoTrackable
 |      tensorflow.python.trackable.base.Trackable
 |      keras.src.ops.operation.Operation
 |      keras.src.saving.keras_saveable.KerasSaveable
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  __init__(
 |    self,
 |    bin_boundaries=None,
 |    num_bins=None,
 |    epsilon=0.01,
 |    output_mode='int',
 |    sparse=False,
 |    dtype=None,
 |    name=None
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  adapt(
 |    self,
 |    data,
 |    steps=None
 |  )
 |      Computes bin boundaries from quantiles in a input dataset.
 |
 |      Calling `adapt()` on a `Discretization` layer is an alternative to
 |      passing in a `bin_boundaries` argument during construction. A
 |      `Discretization` layer should always be either adapted over a dataset or
 |      passed `bin_boundaries`.
 |
 |      During `adapt()`, the layer will estimate the quantile boundaries of the
 |      input dataset. The number of quantiles can be controlled via the
 |      `num_bins` argument, and the error tolerance for quantile boundaries can
 |      be controlled via the `epsilon` argument.
 |
 |      Arguments:
 |          data: The data to train on. It can be passed either as a
 |              batched `tf.data.Dataset`,
 |              or as a NumPy array.
 |          steps: Integer or `None`.
 |              Total number of steps (batches of samples) to process.
 |              If `data` is a `tf.data.Dataset`, and `steps` is `None`,
 |              `adapt()` will run until the input dataset is exhausted.
 |              When passing an infinitely
 |              repeating dataset, you must specify the `steps` argument. This
 |              argument is not supported with array inputs or list inputs.
 |
 |  call(self, inputs)
 |
 |  compute_output_spec(self, inputs)
 |
 |  finalize_state(self)
 |
 |  get_config(self)
 |      Returns the config of the object.
 |
 |      An object config is a Python dictionary (serializable)
 |      containing the information needed to re-instantiate it.
 |
 |  load_own_variables(self, store)
 |      Loads the state of the layer.
 |
 |      You can override this method to take full control of how the state of
 |      the layer is loaded upon calling `keras.models.load_model()`.
 |
 |      Args:
 |          store: Dict from which the state of the model will be loaded.
 |
 |  reset_state(self)
 |
 |  update_state(self, data)
 |
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |
 |  from_config(config, custom_objects=None)
 |      Creates an operation from its config.
 |
 |      This method is the reverse of `get_config`, capable of instantiating the
 |      same operation from the config dictionary.
 |
 |      Note: If you override this method, you might receive a serialized dtype
 |      config, which is a `dict`. You can deserialize it as follows:
 |
 |      ```python
 |      if "dtype" in config and isinstance(config["dtype"], dict):
 |          policy = dtype_policies.deserialize(config["dtype"])
 |      ```
 |
 |      Args:
 |          config: A Python dictionary, typically the output of `get_config`.
 |
 |      Returns:
 |          An operation instance.
 |
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |
 |  input_dtype
 |      The dtype layer inputs should be converted to.
 |


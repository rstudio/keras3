__signature__
keras.Model.save_weights(
  self,
  filepath,
  overwrite=True,
  max_shard_size=None
)
__doc__
Saves all weights to a single file or sharded files.

By default, the weights will be saved in a single `.weights.h5` file.
If sharding is enabled (`max_shard_size` is not `None`), the weights
will be saved in multiple files, each with a size at most
`max_shard_size` (in GB). Additionally, a configuration file
`.weights.json` will contain the metadata for the sharded files.

The saved sharded files contain:

- `*.weights.json`: The configuration file containing 'metadata' and
    'weight_map'.
- `*_xxxxxx.weights.h5`: The sharded files containing only the
    weights.

Args:
    filepath: `str` or `pathlib.Path` object. Path where the weights
        will be saved.  When sharding, the filepath must end in
        `.weights.json`. If `.weights.h5` is provided, it will be
        overridden.
    overwrite: Whether to overwrite any existing weights at the target
        location or instead ask the user via an interactive prompt.
    max_shard_size: `int` or `float`. Maximum size in GB for each
        sharded file. If `None`, no sharding will be done. Defaults to
        `None`.

Example:

```python
# Instantiate a EfficientNetV2L model with about 454MB of weights.
model = keras.applications.EfficientNetV2L(weights=None)

# Save the weights in a single file.
model.save_weights("model.weights.h5")

# Save the weights in sharded files. Use `max_shard_size=0.25` means
# each sharded file will be at most ~250MB.
model.save_weights("model.weights.json", max_shard_size=0.25)

# Load the weights in a new model with the same architecture.
loaded_model = keras.applications.EfficientNetV2L(weights=None)
loaded_model.load_weights("model.weights.h5")
x = keras.random.uniform((1, 480, 480, 3))
assert np.allclose(model.predict(x), loaded_model.predict(x))

# Load the sharded weights in a new model with the same architecture.
loaded_model = keras.applications.EfficientNetV2L(weights=None)
loaded_model.load_weights("model.weights.json")
x = keras.random.uniform((1, 480, 480, 3))
assert np.allclose(model.predict(x), loaded_model.predict(x))
```


Help on class Variable in module keras.src.backend.common.variables:

class Variable(builtins.object)
 |  Variable(
 |    initializer,
 |    shape=None,
 |    dtype=None,
 |    trainable=True,
 |    autocast=True,
 |    aggregation='none',
 |    synchronization='auto',
 |    name=None,
 |    **kwargs
 |  )
 |
 |  Represents a backend-agnostic variable in Keras.
 |
 |  A `Variable` acts as a container for state. It holds a tensor value and can
 |  be updated. With the JAX backend, variables are used to implement
 |  "functionalization", the pattern of lifting stateful operations out of
 |  a piece of computation to turn it into a stateless function.
 |
 |  Args:
 |      initializer: Initial value or callable for initialization.
 |          If a callable is used, it should take the arguments
 |          `shape` and `dtype`.
 |      shape: Optional. Tuple for the variable's shape.
 |          Required if `initializer` is a callable.
 |      dtype: Optional. Data type of the variable. Defaults to the global float
 |          dtype type (`"float32"` if never configured).
 |      trainable: Optional. Boolean indicating if variable is trainable.
 |          Defaults to `True`.
 |      autocast: Optional. Boolean indicating whether the variable supports
 |          autocasting. If `True`, the layer may first convert the variable
 |          to the compute data type when accessed. Defaults to `True`.
 |      aggregation: Optional string, one of `None`, `"none"`, `"mean"`,
 |          `"sum"` or `"only_first_replica"` specifying how a distributed
 |          variable will be aggregated. This serves as a semantic annotation,
 |          to be taken into account by downstream backends or users. Defaults
 |          to `"none"`.
 |      name: Optional. A unique name for the variable. Automatically generated
 |          if not set.
 |
 |  Attributes:
 |      shape: The shape of the variable (tuple of integers).
 |      ndim: The number of dimensions of the variable (integer).
 |      dtype: The data type of the variable (string).
 |      trainable: Whether the variable is trainable (boolean).
 |      autocast: Whether the variable supports autocasting (boolean).
 |      aggregation: How a distributed variable will be aggregated (string).
 |      value: The current value of the variable (NumPy array or tensor).
 |      name: The name of the variable (string).
 |      path: The path of the variable within the Keras model or layer (string).
 |      kwargs: Additional backend-specific keyword arguments.
 |
 |  Examples:
 |
 |  **Initializing a `Variable` with a NumPy array:**
 |
 |  ```python
 |  import numpy as np
 |  import keras
 |  initial_array = np.ones((3, 3))
 |  variable_from_array = keras.Variable(initializer=initial_array)
 |  ```
 |
 |  **Using a Keras initializer to create a `Variable`:**
 |
 |  ```python
 |  from keras.src.initializers import Ones
 |  variable_from_initializer = keras.Variable(
 |      initializer=Ones(), shape=(3, 3), dtype="float32"
 |  )
 |  ```
 |
 |  **Updating the value of a `Variable`:**
 |
 |  ```python
 |  new_value = np.zeros((3, 3), dtype="float32")
 |  variable_from_array.assign(new_value)
 |  ```
 |
 |  **Marking a `Variable` as non-trainable:**
 |
 |  ```python
 |  non_trainable_variable = keras.Variable(
 |      initializer=np.ones((3, 3), dtype="float32"), trainable=False
 |  )
 |  ```
 |
 |  Methods defined here:
 |
 |  __abs__(self)
 |
 |  __add__(self, other)
 |
 |  __and__(self, other)
 |
 |  __array__(self, dtype=None)
 |
 |  __bool__(self)
 |
 |  __eq__(self, other)
 |      Return self==value.
 |
 |  __float__(self)
 |
 |  __floordiv__(self, other)
 |
 |  __ge__(self, other)
 |      Return self>=value.
 |
 |  __getitem__(self, idx)
 |
 |  __gt__(self, other)
 |      Return self>value.
 |
 |  __init__(
 |    self,
 |    initializer,
 |    shape=None,
 |    dtype=None,
 |    trainable=True,
 |    autocast=True,
 |    aggregation='none',
 |    synchronization='auto',
 |    name=None,
 |    **kwargs
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  __int__(self)
 |
 |  __invert__(self)
 |
 |  __le__(self, other)
 |      Return self<=value.
 |
 |  __lt__(self, other)
 |      Return self<value.
 |
 |  __matmul__(self, other)
 |
 |  __mod__(self, other)
 |
 |  __mul__(self, other)
 |
 |  __ne__(self, other)
 |      Return self!=value.
 |
 |  __neg__(self)
 |
 |  __or__(self, other)
 |      Return self|value.
 |
 |  __pos__(self)
 |
 |  __pow__(self, other)
 |
 |  __radd__(self, other)
 |
 |  __rand__(self, other)
 |
 |  __repr__(self)
 |      Return repr(self).
 |
 |  __rfloordiv__(self, other)
 |
 |  __rmatmul__(self, other)
 |
 |  __rmod__(self, other)
 |
 |  __rmul__(self, other)
 |
 |  __ror__(self, other)
 |      Return value|self.
 |
 |  __round__(self, ndigits=None)
 |
 |  __rpow__(self, other)
 |
 |  __rsub__(self, other)
 |
 |  __rtruediv__(self, other)
 |
 |  __rxor__(self, other)
 |
 |  __sub__(self, other)
 |
 |  __truediv__(self, other)
 |
 |  __xor__(self, other)
 |
 |  assign(self, value)
 |
 |  assign_add(self, value)
 |
 |  assign_sub(self, value)
 |
 |  numpy(self)
 |
 |  ----------------------------------------------------------------------
 |  Readonly properties defined here:
 |
 |  aggregation
 |      The strategy for aggregating this variable.
 |
 |  dtype
 |      The data type of the variable.
 |
 |  name
 |      The name of the variable.
 |
 |  ndim
 |      The number of dimensions of the variable.
 |
 |  path
 |      The path of the variable within the Keras model or layer.
 |
 |  shape
 |      The shape of the variable.
 |
 |  synchronization
 |      The strategy for synchronizing this variable.
 |
 |  value
 |      The current value of the variable (numpy array or backend tensor).
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |
 |  __dict__
 |      dictionary for instance variables
 |
 |  __weakref__
 |      list of weak references to the object
 |
 |  constraint
 |
 |  overwrite_with_gradient
 |      Whether this variable should be overwritten by the gradient.
 |
 |      This property is designed for a special case where we want to overwrite
 |      the variable directly with its computed gradient. For example, in float8
 |      training, new `scale` and `amax_history` are computed as gradients, and
 |      we want to overwrite them directly instead of following the typical
 |      procedure such as gradient descent with a learning rate, gradient
 |      clipping and weight decaying.
 |
 |  regularizer
 |
 |  trainable
 |      Whether the variable is trainable.
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  __hash__ = None

